<?xml version="1.0" encoding="utf-8" ?>
<manifest>
  <control namespace="oss" constructor="HTMLWYSIWYGEDITOR" version="0.0.88" display-name-key="HTMLWYSIWYGEDITOR" description-key="HTMLWYSIWYGEDITOR description" control-type="virtual" >
    <!--external-service-usage node declares whether this 3rd party PCF control is using external service or not, if yes, this control will be considered as premium and please also add the external domain it is using.
    If it is not using any external service, please set the enabled="false" and DO NOT add any domain below. The "enabled" will be false by default.
    Example1:
      <external-service-usage enabled="true">
        <domain>www.Microsoft.com</domain>
      </external-service-usage>
    Example2:
      <external-service-usage enabled="false">
      </external-service-usage>
    -->
    <external-service-usage enabled="false">
      <!--UNCOMMENT TO ADD EXTERNAL DOMAINS
      <domain></domain>
      <domain></domain>
      -->
    </external-service-usage>
    <type-group name="text">
      <type>SingleLine.Text</type>
      <type>Multiple</type>
      <type>SingleLine.TextArea</type>
      <type>SingleLine.Email</type>
      <type>SingleLine.Phone</type>
      <type>SingleLine.URL</type>
      <type>SingleLine.Ticker</type>
    </type-group>
    <!-- property node identifies a specific, configurable piece of data that the control expects from CDS -->
    <property name="jsonInputField" display-name-key="JSON Input Field" description-key="Field from where to load input JSON" of-type-group="text" usage="bound" required="true" />
    <property name="htmlOutputField" display-name-key="HTML Output Field" description-key="Field where to store the generated HTML" of-type-group="text" usage="bound" required="true" />
    <property name="customScriptPath" display-name-key="Custom Script Path" description-key="Relative URL to your custom script to run, looks like /WebResources/..." of-type-group="text" usage="input" />
    <property name="customScriptInitFunc" display-name-key="Custom Script Init Func" description-key="Namespace of the custom init func for the unlayer editor" of-type-group="text" usage="input" />
    <property name="customScriptOnReadyFunc" display-name-key="Custom Script OnReady Func" description-key="Namespace of the custom onReady func for the unlayer editor" of-type-group="text" usage="input" />
    <property name="projectId" display-name-key="Project Id" description-key="Your unlayer editor project Id" of-type="Whole.None" usage="input" />
    <property name="displayMode" display-name-key="Display Mode" description-key="Which display mode to initialize in Unlayer editor. Email or Web, defaults to web" of-type-group="text" usage="input" />
    <property name="imageUploadEntity" display-name-key="Image Upload Entity" description-key="Logical Name of entity where images should be stored" of-type-group="text" usage="input" />
    <property name="imageUploadEntityFileNameField" display-name-key="Image Upload Entity File Name Field" description-key="Logical Name of field where file name should be stored as record name" of-type-group="text" usage="input" />
    <property name="imageUploadEntityBodyField" display-name-key="Image Upload Entity Body Field" description-key="Logical Name of field where file content should be stored. Can be of type file or image." of-type-group="text" usage="input" />
    <property name="imageUploadEntityParentLookupName" display-name-key="Image Upload Entity Parent Lookup Name" description-key="SCHEMA NAME of field in the image upload entity which points to the current templating record" of-type-group="text" usage="input" />
    <!--
      Property node's of-type attribute can be of-type-group attribute.
      Example:
      <type-group name="numbers">
        <type>Whole.None</type>
        <type>Currency</type>
        <type>FP</type>
        <type>Decimal</type>
      </type-group>
      <property name="sampleProperty" display-name-key="Property_Display_Key" description-key="Property_Desc_Key" of-type-group="numbers" usage="bound" required="true" />
    -->
    <resources>
      <code path="index.ts" order="1"/>
      <platform-library name="React" version="16.8.6" />
      <platform-library name="Fluent" version="8.29.0" />
      <!-- UNCOMMENT TO ADD MORE RESOURCES
      <css path="css/HTMLWYSIWYGEDITOR.css" order="1" />
      <resx path="strings/HTMLWYSIWYGEDITOR.1033.resx" version="1.0.0" />
      -->
    </resources>
    <!-- UNCOMMENT TO ENABLE THE SPECIFIED API
    <feature-usage>
      <uses-feature name="Device.captureAudio" required="true" />
      <uses-feature name="Device.captureImage" required="true" />
      <uses-feature name="Device.captureVideo" required="true" />
      <uses-feature name="Device.getBarcodeValue" required="true" />
      <uses-feature name="Device.getCurrentPosition" required="true" />
      <uses-feature name="Device.pickFile" required="true" />
      <uses-feature name="Utility" required="true" />
      <uses-feature name="WebAPI" required="true" />
    </feature-usage>
    -->
  </control>
</manifest>
